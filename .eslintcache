[{"/home/anish/code/tic-tac-toe/src/index.js":"1","/home/anish/code/tic-tac-toe/src/App.js":"2","/home/anish/code/tic-tac-toe/src/reportWebVitals.js":"3","/home/anish/code/tic-tac-toe/src/components/Board.js":"4"},{"size":500,"mtime":1610437778180,"results":"5","hashOfConfig":"6"},{"size":423,"mtime":1610439232505,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1610437778180,"results":"8","hashOfConfig":"6"},{"size":6288,"mtime":1610446702095,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"bjk5jn",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"/home/anish/code/tic-tac-toe/src/index.js",[],["20","21"],"/home/anish/code/tic-tac-toe/src/App.js",[],"/home/anish/code/tic-tac-toe/src/reportWebVitals.js",[],"/home/anish/code/tic-tac-toe/src/components/Board.js",["22","23","24"],"import React from 'react';\n\nimport '../stylesheets/board.css';\n\nimport zero from '../images/zero.svg';\nimport cross from '../images/cross.svg';\n\nconst initialBoard = Array(9).fill(null);\n\nconst winSeq = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n];\n\nvar images = {\n    O: zero,\n    X: cross,\n};\n\nvar buttonStyles = [\n    { borderTop: 'none', borderLeft: 'none' },\n    { borderTop: 'none' },\n    { borderTop: 'none', borderRight: 'none' },\n    { borderLeft: 'none' },\n    {},\n    { borderRight: 'none' },\n    { borderBottom: 'none', borderLeft: 'none' },\n    { borderBottom: 'none' },\n    { borderBottom: 'none', borderRight: 'none' },\n];\n\nconst initialState = {\n    boardState: initialBoard,\n    turn: 'X',\n    active: true,\n    winText: null,\n    checks: false,\n};\n\nclass Board extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ...initialState,\n            computer: 0,\n            you: 0,\n        };\n    }\n\n    reset = () => {\n        this.setState({\n            ...initialState,\n            boardState: Array(9).fill(null),\n        });\n    };\n\n    componentDidUpdate() {\n        if (!this.state.active) {\n            return;\n        }\n        if (!this.state.checks) {\n            if (this.checkWinCondition('O')) {\n                var computer = this.state.computer;\n                this.setState({\n                    active: false,\n                    winText: 'Computer wins!',\n                    computer: computer + 1,\n                });\n            } else if (this.checkWinCondition('X')) {\n                var you = this.state.you;\n                this.setState({\n                    active: false,\n                    winText: 'You win!',\n                    you: you + 1,\n                });\n            } else if (this.checkDrawCondition()) {\n                this.setState({\n                    active: false,\n                    winText: 'Game is Draw',\n                });\n            }\n            this.setState({\n                checks: true,\n            });\n        }\n        if (this.state.checks) {\n            this.computerMoves();\n        }\n    }\n\n    computerMoves = () => {\n        if (!this.state.active) return;\n        if (this.state.turn === 'X') return;\n        var board = this.state.boardState;\n        var moved = false;\n\n        for (var seq of winSeq) {\n            var inPos = [];\n            for (var i of seq) {\n                if (board[i] === 'O') {\n                    inPos.push(i);\n                }\n            }\n            if (inPos.length >= 2) {\n                for (i of seq) {\n                    if (!inPos.includes(i) && board[i] === null) {\n                        this.handleMove(i);\n                        moved = true;\n                        return;\n                    }\n                }\n            }\n        }\n\n        if (moved) return;\n\n        for (var seq of winSeq) {\n            var inPos = [];\n            for (var i of seq) {\n                if (board[i] === 'X') {\n                    inPos.push(i);\n                }\n            }\n            if (inPos.length >= 2) {\n                for (i of seq) {\n                    if (!inPos.includes(i) && board[i] === null) {\n                        this.handleMove(i);\n                        moved = true;\n                        return;\n                    }\n                }\n            }\n        }\n\n        if (moved) return;\n\n        while (!moved) {\n            var random = Math.floor(Math.random() * 9);\n            if (board[random] === null) {\n                this.handleMove(random);\n                moved = true;\n            }\n        }\n    };\n\n    checkDrawCondition = () => {\n        if (this.state.active) {\n            if (this.state.boardState.filter((v) => v === null).length === 0)\n                return true;\n        }\n        return false;\n    };\n\n    checkWinCondition = (turn) => {\n        var board = this.state.boardState;\n        var flag = false;\n        for (var seq of winSeq) {\n            flag = true;\n            for (var i of seq) {\n                if (board[i] !== turn) {\n                    flag = false;\n                    break;\n                }\n            }\n            if (flag) {\n                return true;\n            }\n        }\n        return false;\n    };\n\n    handleMove = (index) => {\n        if (!this.state.active) return;\n        var turn = this.state.turn;\n        var boardState = this.state.boardState;\n        if (boardState[index] !== null) return;\n\n        boardState[index] = turn;\n        if (turn === 'X') {\n            turn = 'O';\n        } else {\n            turn = 'X';\n        }\n\n        this.setState({\n            boardState,\n            turn,\n            checks: false,\n        });\n    };\n\n    renderGrid = () => {\n        var buttons = this.state.boardState.map((v, index) => {\n            return (\n                <button\n                    onClick={() => {\n                        this.handleMove(index);\n                    }}\n                    style={buttonStyles[index]}\n                >\n                    {v && (\n                        <img\n                            src={images[v]}\n                            alt={v}\n                            style={{ filter: 'invert(100%)' }}\n                        />\n                    )}\n                </button>\n            );\n        });\n\n        return <div className=\"grid\">{buttons}</div>;\n    };\n\n    render() {\n        let grid = this.renderGrid();\n\n        let turnText = this.state.turn === 'X' ? 'Your turn' : \"O's turn\";\n\n        if (!this.state.active) turnText = 'Game Over';\n\n        return (\n            <div className=\"container\">\n                <h1>Tic Tac Toe</h1>\n                <div className=\"text\">{`You: ${this.state.you} | Computer: ${this.state.computer}`}</div>\n                <div className=\"text\">{turnText}</div>\n                {grid}\n                <div className=\"text\" style={{ fontSize: '42px' }}>\n                    {this.state.winText || <>&nbsp;</>}\n                </div>\n                <button className=\"restart-btn\" onClick={this.reset}>\n                    Restart\n                </button>\n            </div>\n        );\n    }\n}\n\nexport default Board;\n",{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","severity":1,"message":"30","line":123,"column":18,"nodeType":"31","messageId":"32","endLine":123,"endColumn":21},{"ruleId":"29","severity":1,"message":"33","line":124,"column":17,"nodeType":"31","messageId":"32","endLine":124,"endColumn":22},{"ruleId":"29","severity":1,"message":"34","line":125,"column":22,"nodeType":"31","messageId":"32","endLine":125,"endColumn":23},"no-native-reassign",["35"],"no-negated-in-lhs",["36"],"no-redeclare","'seq' is already defined.","Identifier","redeclared","'inPos' is already defined.","'i' is already defined.","no-global-assign","no-unsafe-negation"]